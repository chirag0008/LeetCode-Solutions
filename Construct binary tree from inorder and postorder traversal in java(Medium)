public TreeNode buildTree(int[] inorder, int[] postorder) {
        HashMap<Integer,Integer>hm=new HashMap<>();
        for(int i=0;i<inorder.length;i++){
            hm.put(inorder[i],i);
        }
        return buildTree(inorder,0,inorder.length-1,postorder,0,postorder.length-1,hm);
        
   }
   public TreeNode buildTree(int inorder[],int inStart,int inEnd,int postorder[],int postStart,int postEnd,
   HashMap<Integer,Integer>hm){
       if(inStart>inEnd || postStart>postEnd){
           return null;
       }
       TreeNode root=new TreeNode(postorder[postEnd]);
       int rootIdx=hm.get(root.val);
       int leftEle=rootIdx-inStart;
       root.left=buildTree(inorder,inStart,rootIdx-1,postorder,postStart,postStart+leftEle-1,hm);
       root.right=buildTree(inorder,rootIdx+1,inEnd,postorder,postStart+leftEle,postEnd-1,hm);
       return root;

   }
