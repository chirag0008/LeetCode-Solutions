 int getpivot(vector<int> nums){
        int start=0;
        int n=nums.size();
        int end=n-1;
        int mid=start+(end-start)/2;
        while(start<end){
            if(nums[mid]>=nums[0]){
                start=mid+1;
            }
            else{
                end=mid;
            }
            mid=(start+end)/2;
        }
        return start;
    }
    int binarySearch(vector<int> nums,int start,int end,int target){
        int mid=(start+end)/2;
        while(start<=end){
            if(nums[mid]==target){
                return mid;
            }
            else if(nums[mid]>target){
                end=mid-1;
            }
            else{
                start=mid+1;
            }
            mid=(start+end)/2;
        }
        return -1;
        
    }
    int search(vector<int>& nums, int target) {
        int pivot=getpivot(nums);
        if(nums[pivot]<=target && target<=nums[nums.size()-1]){
            return binarySearch(nums,pivot,(nums.size())-1,target);
            
        }
        else{
            return binarySearch(nums,0,pivot-1,target);
        }
    }
